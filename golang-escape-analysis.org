#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+TITLE: Golang escape analysis
#+KEYWORDS: golang
#+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
#+BEGIN_abstract
This article introduces the principle and general implementation of
golang's escape analysis.
#+END_abstract
#+TOC: headlines 2

** visitBottomUp
   The entry in =escape analysis= is the =escapes= function.

#+BEGIN_SRC go
func escapes(all []*Node) {
	visitBottomUp(all, escAnalyze)
}
func escAnalyze(all []*Node, recursive bool) {
        //...
}
func visitBottomUp(list []*Node, analyze func(list []*Node, recursive bool)) {
        // ...
	for _, n := range list {
		if n.Op == ODCLFUNC && !n.Func.IsHiddenClosure() {
			v.visit(n)
		}
	}
}
#+END_SRC   
On the whole, =[]*Node= can be seen as a list of trees, also as a graph, because
some subtrees are connected to each other.

As you can see from the name of =visitBottomUp=, it will traverse from bottom to
top, and its argument =analyze='s first argument =list= is =[]*Node=, its
content is a list of functions, each function will only call other functions in
the list or functions that have been passed in previous invocations of =analyze=

Said in the previous paragraph, the function in =list= will only call the
functions in =list=.  这里面包括了2中情况，第一种是

In the graph theory, strongly connected components is a set
of elements that are accessible to each other. 实际上
