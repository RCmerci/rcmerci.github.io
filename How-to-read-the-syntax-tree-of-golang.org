#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+TITLE: How to read the syntax tree of golang
#+KEYWORDS: golang
#+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
#+BEGIN_abstract

I will explain in this article how to understand some of the fields in
the syntax tree output by the golang compiler.
#+END_abstract
#+TOC: headlines 2

** Get syntax tree
We can get the syntax tree as follows:

First, suppose there is =main.go=
#+BEGIN_SRC go
package main

import (
	"fmt"
)

func f2(i int) {
	f1(i)
}
func f1(i int) {
	if i > 10 {
		return
	}
	f2(i + 1)
}
func main() {
	fmt.Printf("%+v\n", 1)
	f1(1)
}
#+END_SRC
Then we can use the following command to print out the syntax tree:
#+BEGIN_SRC bash
  go tool compile -W main.go
#+END_SRC
The following syntax tree is output:
#+BEGIN_SRC 
before f2
.   CALLFUNC l(8) tc(1)
.   .   NAME-main.f1 a(true) l(10) x(0) class(PFUNC) tc(1) used FUNC-func(int)
.   CALLFUNC-list
.   .   NAME-main.i a(true) g(1) l(7) x(0) class(PPARAM) f(1) tc(1) used int
after walk f2
.   CALLFUNC l(8) tc(1) hascall
.   .   NAME-main.f1 a(true) l(10) x(0) class(PFUNC) tc(1) used FUNC-func(int)
.   CALLFUNC-list
.   .   AS l(8) tc(1)
.   .   .   INDREGSP-SP a(true) l(8) x(0) tc(1) addrtaken main.__ int
.   .   .   NAME-main.i a(true) g(1) l(7) x(0) class(PPARAM) f(1) tc(1) used int

before f1
.   IF l(11) tc(1)
.   .   GT l(11) tc(1) bool
.   .   .   NAME-main.i a(true) g(1) l(10) x(0) class(PPARAM) f(1) tc(1) used int
.   .   .   LITERAL-10 l(11) tc(1) int
.   IF-body
.   .   RETURN l(12) tc(1)

.   CALLFUNC l(14) tc(1)
.   .   NAME-main.f2 a(true) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)
.   CALLFUNC-list
.   .   ADD l(14) tc(1) int
.   .   .   NAME-main.i a(true) g(1) l(10) x(0) class(PPARAM) f(1) tc(1) used int
.   .   .   LITERAL-1 l(14) tc(1) int
after walk f1
.   IF l(11) tc(1)
.   .   GT l(11) tc(1) bool
.   .   .   NAME-main.i a(true) g(1) l(10) x(0) class(PPARAM) f(1) tc(1) used int
.   .   .   LITERAL-10 l(11) tc(1) int
.   IF-body
.   .   RETURN l(12) tc(1)

.   CALLFUNC l(14) tc(1) hascall
.   .   NAME-main.f2 a(true) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)
.   CALLFUNC-list
.   .   AS l(14) tc(1)
.   .   .   INDREGSP-SP a(true) l(14) x(0) tc(1) addrtaken main.__ int
.   .   .   ADD l(14) tc(1) int
.   .   .   .   NAME-main.i a(true) g(1) l(10) x(0) class(PPARAM) f(1) tc(1) used int
.   .   .   .   LITERAL-1 l(14) tc(1) int


...// truncated
#+END_SRC

** The general impression of the syntax tree
Take a closer look at this piece of output text:
#+BEGIN_SRC 
after walk f2
.   CALLFUNC l(8) tc(1) hascall
.   .   NAME-main.f1 a(true) l(10) x(0) class(PFUNC) tc(1) used FUNC-func(int)
.   CALLFUNC-list
.   .   AS l(8) tc(1)
.   .   .   INDREGSP-SP a(true) l(8) x(0) tc(1) addrtaken main.__ int
.   .   .   NAME-main.i a(true) g(1) l(7) x(0) class(PPARAM) f(1) tc(1) used int
#+END_SRC

- =l(8)=		: Line 8 
- =tc(1)= : tc means 'typecheck', Here =1= indicates the level of
  typecheck, I will write an article later to introduce the typecheck
  of golang.
- =NAME-main.f1=	: =main= is package name
- =a(bool)=	: if addressable or not
- =x(0)=		: offset, but have different meanings, source comment says:
#+BEGIN_QUOTE
Various. Usually an offset into a struct. For example:
- ONAME nodes that refer to local variables use it to identify their stack frame position.
- ODOT, ODOTPTR, and OINDREGSP use it to indicate offset relative to their base address.
- OSTRUCTKEY uses it to store the named field's offset.
- Named OLITERALs use it to to store their ambient iota value.
Possibly still more uses. If you find any, document them.
#+END_QUOTE
- =class(PFUNC)=: this node is global function
- =used=: flag for variable declared and not used error
- =FUNC-func(int)=: type of this node
- =AS=: assignment node
- =CALLFUNC-list=: The parameter part of CALLFUNC, '-list' means =List= attribute of =Node=, instead of a literal 'list'
- =INDREGSP-SP=: offset plus indirect of REGSP
- =addrtaken=: address taken, even if not moved to heap
