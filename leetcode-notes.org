#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+TITLE: leetcode notes
#+KEYWORDS: algorithm


** two sum
#+BEGIN_SRC go
  package main
  import (
          "fmt"
  )

  func twoSum(nums []int, target int) []int {
          m := map[int]int{}
          for i := range nums {
                  ind, ok := m[target-nums[i]]
                  if ok {
                          return []int{ind, i}
                  }
                  m[nums[i]] = i
          }
          return nil
  }

  func main() {
          fmt.Printf("%+v\n", twoSum([]int{2, 7, 11, 15}, 9)) // output for debug

  }
#+END_SRC

#+RESULTS:
: [0 1]

** add two numbers
#+BEGIN_SRC go
package main
import (
	"fmt"
)

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
type ListNode struct {
	Val  int
	Next *ListNode
}

func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
	r := ListNode{}
	tmpr := &r
	var last *ListNode
	carry := false
	for {
		rr := 0
		if carry {
			rr += 1
			carry = false
		}
		if l1 != nil {
			rr += l1.Val
			l1 = l1.Next
		}
		if l2 != nil {
			rr += l2.Val
			l2 = l2.Next
		}
		if rr > 9 {
			carry = true
			rr -= 10
		}
		if rr == 0 && !carry && l1 == nil && l2 == nil {
			if last != nil {
				last.Next = nil
			}
			return &r
		}
		tmpr.Val = rr
		tmpr.Next = &ListNode{}
		tmpr.Next.Next = nil
		last = tmpr
		tmpr = tmpr.Next
	}
	return nil
}

func main() {
	l1 := &ListNode{Val: 2, Next: &ListNode{Val: 4, Next: &ListNode{Val: 3, Next: nil}}}
	l2 := &ListNode{Val: 5, Next: &ListNode{Val: 6, Next: &ListNode{Val: 4, Next: nil}}}
	r := addTwoNumbers(l1, l2)
	fmt.Printf("%+v\n", r)                // output for debug
	fmt.Printf("%+v\n", r.Next)           // output for debug
	fmt.Printf("%+v\n", r.Next.Next)      // output for debug
	fmt.Printf("%+v\n", r.Next.Next.Next) // output for debug
}
#+END_SRC

#+RESULTS:
: &{Val:7 Next:0xc0000101f0}
: &{Val:0 Next:0xc000010200}
: &{Val:8 Next:<nil>}
: <nil>

** Longest Substring Without Repeating Characters
#+BEGIN_SRC go
  package main

  import (
          "fmt"
  )

  func lengthOfLongestSubstring(s string) int {
          m := map[byte]int{}
          i, j := 0, 0
          max := 0
          for ; j < len(s); j++ {
                  if ind, ok := m[s[j]]; ok && ind >= i {
                          i = ind + 1
                  }
                  m[s[j]] = j
                  if max < j-i+1 {
                          max = j - i + 1
                  }
          }
          return max
  }

  func main() {
          fmt.Printf("%+v\n", lengthOfLongestSubstring("abcabcbb")) // output for debug
          fmt.Printf("%+v\n", lengthOfLongestSubstring("bbbbbbbb")) // output for debug
          fmt.Printf("%+v\n", lengthOfLongestSubstring("pwwkew"))   // output for debug
          fmt.Printf("%+v\n", lengthOfLongestSubstring("abba"))     // output for debug
  }


#+END_SRC

#+RESULTS:
: 3
: 1
: 3
: 2

** Median of Two Sorted Arrays
#+BEGIN_SRC go
  package main

  import (
          "fmt"
  )

  func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
          m := len(nums1)
          n := len(nums2)
          if m > n {
                  n, m = m, n
                  nums1, nums2 = nums2, nums1
          }
          imin, imax := 0, m
          for imin <= imax {
                  i := (imin + imax) / 2
                  j := (m+n)/2 - i
                  if i > 0 && nums1[i-1] > nums2[j] {
                          imax = i - 1
                  } else if i < imax && nums2[j-1] > nums1[i] {
                          imin = i + 1
                  } else {
                          maxleft := 0
                          minright := 0
                          if i == m {
                                  minright = nums2[j]
                          } else if j == n {
                                  minright = nums1[i]
                          } else {
                                  if nums1[i] < nums2[j] {
                                          minright = nums1[i]
                                  } else {
                                          minright = nums2[j]
                                  }
                          }
                          if (m+n)%2 == 1 {
                                  return float64(minright)
                          }
                          if i < 1 {
                                  maxleft = nums2[j-1]
                          } else if j < 1 {
                                  maxleft = nums1[i-1]
                          } else {
                                  if nums1[i-1] > nums2[j-1] {
                                          maxleft = nums1[i-1]
                                  } else {
                                          maxleft = nums2[j-1]
                                  }
                          }

                          return float64(minright+maxleft) / 2.0
                  }
          }

          return 0.0
  }

  func main() {
          fmt.Printf("%+v\n", findMedianSortedArrays([]int{1, 2, 3, 5, 6, 7, 8}, []int{3, 4})) // output for debug
  }

#+END_SRC

#+RESULTS:
: 4

** Longest Palindromic Substring
#+BEGIN_SRC go
  package main

  import (
          "fmt"
  )

  func longestPalindrome(s string) string {
          if len(s) == 0 {
                  return ""
          }
          m := [1000][1000]bool{}
          for i := 0; i < len(s); i++ {
                  m[i][i] = true
          }
          for l := 1; l < len(s); l++ {
                  for i := 0; i+l < len(s); i++ {

                          if i+1 <= i+l-1 && m[i+1][i+l-1] && s[i] == s[i+l] {
                                  m[i][i+l] = true
                          } else if l == 1 && s[i] == s[i+l] {
                                  m[i][i+l] = true
                          }
                  }
          }

          max := 1
          maxs := string([]byte(s)[0:1])
          for i := 0; i < len(s); i++ {
                  for j := i; j < len(s); j++ {
                          if m[i][j] && j-i+1 > max {
                                  max = j - i + 1
                                  maxs = string([]byte(s)[i : j+1])
                          }
                  }
          }
          return maxs
  }

  func main() {
          fmt.Printf("%+v\n", longestPalindrome("babad")) // output for debug
          fmt.Printf("%+v\n", longestPalindrome("cbbd"))  // output for debug
          fmt.Printf("%+v\n", longestPalindrome(""))      // output for debug
  }
#+END_SRC

** ZigZag Conversion
#+BEGIN_SRC go
func convert(s string, numRows int) string {
	if numRows == 1 {
		return s
	}
	lines := make([][]byte, numRows)
	i := 0
	add := true
	for _, c := range []byte(s) {
		lines[i] = append(lines[i], c)
		if add {
			if i+1 >= numRows {
				i--
				add = false
			} else {
				i++
			}
		} else {
			if i-1 < 0 {
				i++
				add = true
			} else {
				i--
			}
		}
	}

	for i := 1; i < numRows; i++ {
		lines[0] = append(lines[0], lines[i]...)
	}
	return string(lines[0])
}
#+END_SRC
** Reverse Integer
#+BEGIN_SRC go
func reverse(x int) int {
	max := int(math.Pow(2.0, 31.0)) - 1
	min := int(math.Pow(-2.0, 31.0))
	r := 0
	for x != 0 {
		r = 10*r + (x % 10)
		if r > max || r < min {
			return 0
		}
		x /= 10
	}
	return r
}
#+END_SRC
** String to Integer (atoi)
#+BEGIN_SRC go
func myAtoi(str string) int {
	if str == "" {
		return 0
	}
	max := int(math.Pow(2.0, 31)) - 1
	min := int(math.Pow(-2.0, 31))
	i := 0
	for ; i < len(str); i++ {
		if str[i] != ' ' {
			break
		}
	}
	if i == len(str) {
		return 0
	}
	negative := false
	if str[i] >= '0' && str[i] <= '9' {
	} else if str[i] == '+' {
		i++
	} else if str[i] == '-' {
		negative = true
		i++
	} else {
		return 0
	}
	flag := false
	r := 0
	for ; i < len(str); i++ {
		if str[i] >= '0' && str[i] <= '9' {
			flag = true
			r = 10*r + (int(str[i]) - 48)
			if r > max && !negative {
				return max
			} else if (-r) < min && negative {
				return min
			}
		} else if !flag {
			return 0
		} else {
			break
		}
	}
	if negative {
		return (-r)
	}
	return r
}
#+END_SRC
** Palindrome Number
#+BEGIN_SRC go
  func isPalindrome(x int) bool {
         if x < 0 {
                 return false
         }
         tmp := x
         y := 0
         for x > 0 {
                 y = y*10 + x%10
                 x = x / 10
         }
         return tmp == y
  }

#+END_SRC
** Regular Expression Matching
#+BEGIN_SRC go
package main

import (
	"fmt"
)

func isMatch(s string, p string) bool {
	if s == "" && p == "" {
		return true
	}
	dp := map[int]map[int]bool{}
	dp[-1] = map[int]bool{-1: true}
	for i := 0; i < len(p); i++ {
		dp[i] = map[int]bool{}
		for j := -1; j < len(s); j++ {
			if p[i] == '.' {
				if j > -1 && dp[i-1][j-1] {
					dp[i][j] = true
				} // else if i == 0 && j >= 0 && [i] {
				// 	dp[i][j] = true
				// }
				// else {
				// 	dp[i][j] = false
				// }
			} else if p[i] == '*' {
				if i == 0 { // illegal
					return false
				}
				if p[i-1] == '.' && (len(dp[i-2]) > 0) {
					mink := 99999
					for k := range dp[i-2] {
						if k < mink {
							mink = k
						}
					}
					if j >= mink {
						dp[i][j] = true
					}
				} else if dp[i-1][j] || dp[i-2][j] {
					dp[i][j] = true
				} else if j >= 0 && p[i-1] == s[j] && (dp[i-1][j-1] || dp[i][j-1]) {
					dp[i][j] = true
				}
			} else {
				if j == -1 {
					continue
				}
				if j >= 0 {
					if p[i] == s[j] && dp[i-1][j-1] {
						dp[i][j] = true
					}
				}
			}
		}
	}

	return dp[len(p)-1][len(s)-1]
}

func main() {
	fmt.Printf("%+v\n", isMatch("baaac", ".*b.*c")) // Output for debug
}

#+END_SRC

#+RESULTS:
: true
** Container With Most Water
#+BEGIN_SRC go
package main

import (
	"fmt"
)

func maxArea(height []int) int {
	i := 0
	j := len(height) - 1
	max := 0
	for i < j {
		if height[i] > height[j] {
			if height[j]*(j-i) > max {
				max = height[j] * (j - i)
			}
			j--
		} else {
			if height[i]*(j-i) > max {
				max = height[i] * (j - i)
			}
			i++
		}

	}

	return max
}

func main() {
	fmt.Printf("%+v\n", maxArea([]int{1, 3, 2, 5, 25, 24, 5})) // output for debug

}

#+END_SRC

#+RESULTS:
: 24
** Integer to Roman
#+BEGIN_SRC go
package main

import (
	"fmt"
	"strings"
)

func intToRoman(num int) string {
	a := num / 1000
	num = num % 1000
	b := num / 900
	num = num % 900
	c := num / 500
	num = num % 500
	d := num / 400
	num = num % 400
	e := num / 100
	num = num % 100
	f := num / 90
	num = num % 90
	g := num / 50
	num = num % 50
	h := num / 40
	num = num % 40
	i := num / 10
	num = num % 10
	j := num / 9
	num = num % 9
	k := num / 5
	num = num % 5
	l := num / 4
	num = num % 4
	m := num

	return strings.Repeat("M", a) + strings.Repeat("CM", b) + strings.Repeat("D", c) + strings.Repeat("CD", d) + strings.Repeat("C", e) + strings.Repeat("XC", f) + strings.Repeat("L", g) + strings.Repeat("XL", h) + strings.Repeat("X", i) + strings.Repeat("IX", j) + strings.Repeat("V", k) + strings.Repeat("IV", l) + strings.Repeat("I", m)
}

func main() {
	fmt.Printf("%+v\n", intToRoman(58)) // output for debug

}

#+END_SRC

#+RESULTS:
: LVIII
** Roman to Integer
#+BEGIN_SRC go
package main

import (
	"fmt"
)

func romanToInt(s string) int {
	r := 0
	for i := 0; i < len(s); i++ {
		switch s[i] {
		case 'I':
			if i+1 < len(s) {
				if s[i+1] == 'V' {
					r += 4
					i++
					continue
				} else if s[i+1] == 'X' {
					r += 9
					i++
					continue
				}
			}
			r += 1
		case 'X':
			if i+1 < len(s) {
				if s[i+1] == 'L' {
					r += 40
					i++
					continue

				} else if s[i+1] == 'C' {
					r += 90
					i++
					continue
				}
			}
			r += 10
		case 'C':
			if i+1 < len(s) {
				if s[i+1] == 'D' {
					r += 400
					i++
					continue
				} else if s[i+1] == 'M' {
					r += 900
					i++
					continue
				}
			}
			r += 100
		case 'V':
			r += 5
		case 'L':
			r += 50
		case 'D':
			r += 500
		case 'M':
			r += 1000
		}
	}
	return r
}
func main() {
	fmt.Printf("%+v\n", romanToInt("MCMXCIV")) // output for debug

}


#+END_SRC

#+RESULTS:
: 1994
** Longest Common Prefix
#+BEGIN_SRC go
package main

import (
	"fmt"
)

func longestCommonPrefix(strs []string) string {
	if len(strs) == 1 {
		return strs[0]
	} else if len(strs) == 0 {
		return ""
	}
	j := 0
	finish := false
	for j < len(strs[0]) {
		for i := 1; i < len(strs); i++ {
			if j >= len(strs[i]) || strs[0][j] != strs[i][j] {
				finish = true
				break
			}
		}
		if finish {
			break
		}
		j++

	}
	return strs[0][:j]
}

func main() {
	fmt.Printf("%+v\n", longestCommonPrefix([]string{"flower", "flow", "flowddd"})) // output for debug

}

#+END_SRC
** 3Sum
#+BEGIN_SRC go
package main

import (
	"fmt"
	"sort"
)

func threeSum(nums []int) [][]int {
	sort.Ints(nums)
	r := [][]int{}
	for i := 0; i < len(nums)-2; i++ {
		if i-1 >= 0 && nums[i] == nums[i-1] {
			continue
		}
		j := i + 1
		k := len(nums) - 1
		lastj := nums[j] + 1
		lastk := nums[k] + 1
		last := false
		for j < k {
			l := nums[j] + nums[k] + nums[i]
			if l == 0 && (!last || nums[j] != lastj && nums[k] != lastk) {
				r = append(r, []int{nums[i], nums[j], nums[k]})
				lastj = nums[j]
				lastk = nums[k]
				last = true
				j++
			} else if l < 0 {
				j++
			} else {
				k--
			}
		}
	}
	return r

}
func main() {

	fmt.Printf("%+v\n", threeSum([]int{1, -1, -1, 0})) // output for debug

}

#+END_SRC

#+RESULTS:
: [[-1 0 1]]
** 3Sum Closest
#+BEGIN_SRC go
  func threeSumClosest(nums []int, target int) int {
          sort.Ints(nums)
          closest := nums[0] + nums[1] + nums[2]
          for i := 0; i < len(nums)-2; i++ {
                  j := i + 1
                  k := len(nums) - 1
                  for j < k {
                          diff := nums[i] + nums[j] + nums[k] - target
                          if math.Abs(float64(diff)) < math.Abs(float64(closest-target)) {
                                  closest = nums[i] + nums[j] + nums[k]
                                  if closest == target {
                                          return closest
                                  }
                          }
                          if diff < 0 {
                                  j++
                          } else {
                                  k--
                          }
                  }
          }
          return closest
  }

#+END_SRC
** Letter Combinations of a Phone Number
#+BEGIN_SRC go
var m = map[byte][]byte{
	'2': []byte("abc"),
	'3': []byte("def"),
	'4': []byte("ghi"),
	'5': []byte("jkl"),
	'6': []byte("mno"),
	'7': []byte("pqrs"),
	'8': []byte("tuv"),
	'9': []byte("wxyz"),
}

func backtrack(combination []byte, next []byte, r *([]string)) {
	if len(next) == 0 {
		*r = append(*r, string(combination))
		return
	}
	nextnum := next[0]
	next = next[1:]
	for _, i := range m[nextnum] {
		backtrack(append(combination, i), next, r)
	}
	return
}

func letterCombinations(digits string) []string {
	if len(digits) == 0 {
		return []string{}
	}
	r := []string{}
	backtrack([]byte{}, []byte(digits), &r)
	return r
}
#+END_SRC
** 4Sum
#+BEGIN_SRC go
func fourSum(nums []int, target int) [][]int {
	r := [][]int{}
	sort.Ints(nums)
	for i := 0; i < len(nums)-3; i++ {
		for j := i + 1; j < len(nums)-2; j++ {
			k := j + 1
			l := len(nums) - 1
			for k < l {
				sum := nums[i] + nums[j] + nums[k] + nums[l]
				if sum == target {
					r = append(r, []int{nums[i], nums[j], nums[k], nums[l]})
				}
				if sum < target {
					for k+1 < l && nums[k] == nums[k+1] {
						k++
					}
					k++
				} else {
					for l-1 > k && nums[l] == nums[l-1] {
						l--
					}
					l--
				}
			}
			for j+1 < len(nums)-2 && nums[j] == nums[j+1] {
				j++
			}
		}
		for i+1 < len(nums)-3 && nums[i] == nums[i+1] {
			i++
		}
	}
	return r
}
#+END_SRC
** Remove Nth Node From End of List
#+BEGIN_SRC go
func removeNthFromEnd(head *ListNode, n int) *ListNode {
	orig := &ListNode{}
	orig.Next = head
	prev := orig
	head = orig
	for i := 0; i < n; i++ {
		head = head.Next
	}
	for head.Next != nil {
		prev = prev.Next
		head = head.Next
	}
	prev.Next = prev.Next.Next
	return orig.Next
}
#+END_SRC
** Valid Parentheses
#+BEGIN_SRC go
func isValid(s string) bool {
	stack := []byte{}
	for _, i := range []byte(s) {
		if i == '(' || i == '{' || i == '[' {
			stack = append(stack, i)
		} else if len(stack) == 0 {
			return false
		} else {
			last := stack[len(stack)-1]
			stack = stack[:len(stack)-1]
			if !(i == ')' && last == '(' || i == '}' && last == '{' || i == ']' && last == '[') {
				return false
			}
		}
	}
	return len(stack) == 0
}
#+END_SRC
** Merge Two Sorted Lists
#+BEGIN_SRC go
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
	if l1 == nil {
		return l2
	}
	if l2 == nil {
		return l1
	}
	if l1.Val < l2.Val {
		l1.Next = mergeTwoLists(l1.Next, l2)
		return l1
	} else {
		l2.Next = mergeTwoLists(l1, l2.Next)
		return l2
	}

}
#+END_SRC
** Generate Parentheses
#+BEGIN_SRC go
func generateParenthesis(n int) []string {
	res := []string{}
	aux(0, 0, n, "", &res)
	return res
}

func aux(l, r, n int, curr string, res *[]string) {
	if l == n && r == n {
		*res = append(*res, curr)
		return
	}
	if l < n {
		aux(l+1, r, n, curr+"(", res)
	}
	if r < l {
		aux(l, r+1, n, curr+")", res)
	}
}
#+END_SRC
** Merge k Sorted Lists
#+BEGIN_SRC go
func mergeKLists(lists []*ListNode) *ListNode {
	if len(lists) == 0 {
		return nil
	}
	min := &ListNode{Val: 99999999999}
	mini := -1
	for i, l := range lists {
		if l == nil {
			continue
		}
		if l.Val < min.Val {
			min = l
			mini = i
		}
	}
	if mini == -1 {
		return nil
	}
	lists[mini] = lists[mini].Next
	min.Next = mergeKLists(lists)
	return min
}
#+END_SRC
* Bear in mind
  - 检查类似 max, isXXX, flag 的变量是否更新
  - 检查特殊输入,如空字符串
